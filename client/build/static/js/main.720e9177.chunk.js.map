{"version":3,"sources":["components/DataBody.js","components/DataTable.js","components/Search.js","components/Nav.js","components/DataArea.js","utils/API.js","components/Main.js","components/Wrapper.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["DataBody","users","length","map","user","src","picture","thumbnail","alt","name","first","last","phone","email","dob","date","DataTable","className","id","scope","Search","props","htmlFor","onChange","handleSearch","value","search","type","placeholder","Nav","DataArea","axios","get","Main","event","target","setState","filterUsers","state","regex","RegExp","toLowerCase","filter","username","test","API","then","response","data","results","this","Component","Wrapper","children","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oSAwBeA,MAtBf,YAA8B,IAAVC,EAAS,EAATA,MAChB,OACI,+BACsB,IAAjBA,EAAMC,OAAe,4BAAI,oDACtBD,EAAME,KAAI,SAAAC,GAAI,OACV,4BACI,4BAAI,yBAAKC,IAAKD,EAAKE,QAAQC,UAAWC,IAAI,iBAC1C,4BAAKJ,EAAKK,KAAKC,MAAf,IAAuBN,EAAKK,KAAKE,MACjC,4BAAKP,EAAKQ,OACV,4BAAKR,EAAKS,OACV,4BAAKT,EAAKU,IAAIC,UAG1B,4BACI,gCCMDC,MAnBf,YAA+B,IAAVf,EAAS,EAATA,MACjB,OACI,2BAAOgB,UAAU,QAAQC,GAAG,aACxB,+BACI,4BACI,wBAAIC,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SAIJ,kBAAC,EAAD,CAAUlB,MAAOA,MCSlBmB,MAvBf,SAAgBC,GACd,OACE,8BACE,yBAAKJ,UAAU,cACb,2BAAOK,QAAQ,UAAf,WACA,2BACEC,SAAUF,EAAMG,aAChBC,MAAOJ,EAAMK,OACbjB,KAAK,SACLkB,KAAK,OACLV,UAAU,eACVW,YAAY,yBACZV,GAAG,WAEL,gCCFOW,MAXf,SAAaR,GACT,OACI,yBAAKJ,UAAU,UACX,yBAAKA,UAAU,qBACX,kBAAC,EAAWI,MCQbS,MAXd,YAAoD,IAAhC7B,EAA+B,EAA/BA,MAAOuB,EAAwB,EAAxBA,aAAcE,EAAU,EAAVA,OAClC,OACI,oCACI,kBAAC,EAAD,CAAKF,aAAcA,EAAcE,OAAQA,IACzC,yBAAKT,UAAU,aACX,kBAAC,EAAD,CAAWhB,MAAOA,O,iBCRvB,EAED,WACN,OAAO8B,IAAMC,IAAI,kDCAJC,E,YACjB,WAAYZ,GAAQ,IAAD,8BACf,4CAAMA,KAeVG,aAAe,SAAAU,GACX,IAAMT,EAAQS,EAAMC,OAAOV,MAC3B,EAAKW,SAAS,CAACV,OAAQD,KAlBR,EAqBnBY,YAAc,WACV,IAAI,EAAKC,MAAMZ,OAAQ,OAAO,EAAKY,MAAMrC,MAEzC,IAAMsC,EAAQ,IAAIC,OAAO,EAAKF,MAAMZ,OAAOe,cAAe,KAK1D,OAJc,EAAKH,MAAMrC,MAAMyC,QAAO,SAAAtC,GAClC,IAAMuC,GAAYvC,EAAKK,KAAKC,MAAQ,IAAMN,EAAKK,KAAKE,MAAM8B,cAC1D,OAAOF,EAAMK,KAAKD,OAzBtB,EAAKL,MAAQ,CACTrC,MAAO,GACPyB,OAAQ,IAJG,E,iFAQE,IAAD,OAChBmB,IAAeC,MAAK,SAAAC,GAChB,EAAKX,SAAS,CACVnC,MAAO8C,EAASC,KAAKC,e,+BAsB7B,OACI,oCACI,kBAAC,EAAD,CAAUvB,OAAQwB,KAAKZ,MAAMZ,OAAQF,aAAc0B,KAAK1B,aAAcvB,MAAOiD,KAAKb,qB,GApChEc,aCEnBC,MAJf,SAAiB/B,GACf,OAAO,yBAAKJ,UAAU,WAAWI,EAAMgC,WCDpBC,E,iLAEjB,OACE,yBAAKrC,UAAW,UACd,kDACA,sF,GAL4BkC,a,MCgBrBI,MAXf,WACE,OACE,yBAAKtC,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAYuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.720e9177.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction DataBody({ users }) {\r\n    return (\r\n        <tbody>\r\n            {users.length === 0 ? <tr><td>No users to display</td></tr> :\r\n                users.map(user => (\r\n                    <tr>\r\n                        <td><img src={user.picture.thumbnail} alt=\"smiley face\"/></td>\r\n                        <td>{user.name.first} {user.name.last}</td>\r\n                        <td>{user.phone}</td>\r\n                        <td>{user.email}</td>\r\n                        <td>{user.dob.date}</td>\r\n                    </tr>\r\n                ))}\r\n            <tr>\r\n                <td>\r\n\r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n    )\r\n}\r\n\r\nexport default DataBody;","import React from \"react\";\r\nimport DataBody from \"./DataBody\";\r\n\r\nfunction DataTable({ users }) {\r\n    return (\r\n        <table className=\"table\" id=\"employees\">\r\n            <thead>\r\n                <tr>\r\n                    <th scope=\"col\">Image</th>\r\n                    <th scope=\"col\">Name</th>\r\n                    <th scope=\"col\">Phone</th>\r\n                    <th scope=\"col\">Email</th>\r\n                    <th scope=\"col\">DOB</th>\r\n                </tr>\r\n            </thead>\r\n\r\n                <DataBody users={users}/>\r\n\r\n        </table>\r\n    );\r\n};\r\n\r\nexport default DataTable;\r\n","import React from \"react\";\r\n\r\nfunction Search(props) {\r\n  return (\r\n    <form>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"search\">Search:</label>\r\n        <input\r\n          onChange={props.handleSearch}\r\n          value={props.search}\r\n          name=\"search\"\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"Search For An Employee\"\r\n          id=\"search\"\r\n        />\r\n        <br />\r\n        {/* <button onClick={props.handleFormSubmit} className=\"btn btn-primary\">\r\n          Search\r\n        </button> */}\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Search;","import React from \"react\";\r\nimport Search from \"./Search\";\r\n\r\nfunction Nav(props) {\r\n    return (\r\n        <nav className=\"navbar\">\r\n            <div className=\"search-area col-4\">\r\n                <Search {...props} /\r\n                >\r\n            </div>\r\n        </nav>\r\n    )\r\n};\r\n\r\nexport default Nav;","import React from \"react\";\r\nimport DataTable from \"./DataTable\";\r\nimport Nav from \"./Nav\";\r\n\r\n function DataArea({ users, handleSearch, search }) {\r\n        return (\r\n            <>\r\n                <Nav handleSearch={handleSearch} search={search} />\r\n                <div className=\"data-area\">\r\n                    <DataTable users={users} />\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\nexport default DataArea;","import axios from \"axios\";\r\nexport default {\r\n    // Gets all users\r\n    getUsers: function () {\r\n        return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n    }\r\n};","import React, { Component } from \"react\";\r\nimport DataArea from \"./DataArea\";\r\nimport API from \"../utils/API\";\r\n\r\nexport default class Main extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            users: [],\r\n            search: \"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        API.getUsers().then(response => {\r\n            this.setState({\r\n                users: response.data.results\r\n            })\r\n        });\r\n    }\r\n\r\n    handleSearch = event => {\r\n        const value = event.target.value;\r\n        this.setState({search: value});\r\n    }\r\n\r\n    filterUsers = () => {\r\n        if(!this.state.search) return this.state.users;\r\n        \r\n        const regex = new RegExp(this.state.search.toLowerCase(), \"g\");\r\n        const users = this.state.users.filter(user => {\r\n            const username = (user.name.first + \" \" + user.name.last).toLowerCase();\r\n            return regex.test(username)\r\n        });\r\n        return users;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <DataArea search={this.state.search} handleSearch={this.handleSearch} users={this.filterUsers()} />\r\n            </>\r\n        );\r\n    }\r\n};","import React from \"react\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React, {Component} from \"react\";\r\n\r\nexport default class Header extends Component {\r\n  render() {\r\n    return (\r\n      <div className= \"header\">\r\n        <h1>Employee Directory</h1>\r\n        <p>Select \"name\" header column to sort alphabetically</p>\r\n      </div>\r\n    )\r\n  }\r\n};","import React from \"react\";\nimport Main from \"./components/Main\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Wrapper>\n        <Header/>\n        <Main />\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}